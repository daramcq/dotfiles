 Emacs Configuration file
** Package cruft
#+BEGIN_SRC emacs-lisp
;;; package --- Summary
;;; Commentary: Emacs configuration, using org for readability.
;;; My Emacs init file
#+END_SRC
** Debug behaviour
#+BEGIN_SRC emacs-lisp
(setq debug-on-error t)
#+END_SRC
** Set work and home checks
#+BEGIN_SRC emacs-lisp
(defun at-work()
  (string-equal system-type "darwin"))

(defun at-home()
  (string-equal system-type "gnu/linux"))
#+END_SRC
** Packaging setup
*** Core packages
 #+BEGIN_SRC emacs-lisp
      (require 'package)
      (add-to-list 'package-archives
        '("melpa" . "https://melpa.org/packages/"))
      (package-initialize)
   
 #+END_SRC
#+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (eval-when-compile (require 'use-package))
    (use-package exec-path-from-shell
      :ensure t)
    (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize))
  
#+END_SRC
** Multi-Term
Adding multi-term to support ZSH integration:
#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :ensure t)
(when (at-work)
  (setq multi-term-program "/bin/zsh"))
#+END_SRC
** Font Display
*** Basic work/home distinction
#+BEGIN_SRC emacs-lisp
  (when (at-work)
    (set-face-attribute 'default nil :height 160)
    (set-frame-font "Monaco 16" nil t))
  (when (at-home)
    (set-face-attribute 'default nil :height 160)
    (set-frame-font "Ubuntu Mono 16" nil t))
#+END_SRC
*** Mermaid
#+BEGIN_SRC emacs-lisp
;;(setq mermaid-mmdc-location "~/.nvm/versions/node/v22.9.0/lib/node_modules/@mermaid-js/mermaid-cli/src/cli.js")
#+END_SRC
*** COMMENT ChatGPT
#+BEGIN_SRC emacs-lisp
  (use-package gptel
    :config
    (setq gptel-model "gpt-4o")
    (setq gptel-backend (gptel-make-openai "ZendeskChatGPT"
                          :host "ai-gateway.zende.sk"
                          :key "TVXFetb5LIIWwoRKxBUkhkErsqa"
                          :models '("gpt-4o"))))

(add-to-list 'gptel-directives '(threatmodelling . "You are responsible for converting textual information on cybersecurity threats into attack trees, represented by valid Mermaid JS diagrams.\
You will use the below paradigm for your output.\
Components:\
- A top level goal (or 'threat') should be a rectangular box, shaded light red.\
- A substep should be a rectangular box, shaded blue with a blue border.\
- Countermeasures should be hexagons. A hexagon node is denoted with double curly braces, i.e. {{my hexagon}}.\
- Countermeasures can be either preventive or detective. Preventive countermeasures will use language such as 'prevent', 'block', 'stop'. Detective countermeasures will use language such as 'detect', 'alert', 'log', 'audit'.\
Relations:\
- To indicate a choice of options, put a diamond shaped node with the text 'EITHER' between the parent goal and the optional paths.\
- To indicate complementary steps, put a circular node with the text 'AND' between the parent goal and the complementary steps. A circular node is denoted with double parentheses, i.e. ((my circle)).\
- Position countermeasures above the substeps they are mitigating.\
Additional styling:\
- Preventive countermeasures should be coloured light green.\
- Detective countermeasures should be coloured light yellow."))
#+END_SRC                        
*** Org-mode customisation
Use variable-pitch for prose and fixed-pitch for code.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/org/"))
(setq org-default-notes-file (concat org-directory "/daily.org"))
#+END_SRC
** Enable narrow region
#+BEGIN_SRC emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t)
(powerline-default-theme)
#+END_SRC
** Finding Files
*** Copy Buffer name to Kill Ring
#+BEGIN_SRC emacs-lisp
(defun copy-buffer-name ()
  (interactive)
  (kill-new (buffer-file-name)))

(defun project-relative-filename ()
  (interactive)
  (nth 1 (split-string (buffer-file-name) (projectile-project-root))))

(defun copy-project-relative-filename ()
  (interactive)
  (kill-new (project-relative-filename))
  (message (format "Copied %s" (project-relative-filename))))
(global-set-key (kbd "C-c f") 'copy-project-relative-filename)
#+END_SRC
*** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t)
(setq helm-split-window-in-side-p t
      helm-move-to-line-cycle-in-source t)

(helm-mode 1)
(global-set-key (kbd "C-x b") 'helm-buffers-list)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-r") 'helm-recentf)
;;(global-set-key (kbd "C-s") 'helm-occur)
(global-set-key (kbd "C-x r l") 'helm-bookmarks)
(setq helm-move-to-line-cycle-in-source t)
(define-key helm-map (kbd "C-z")  'helm-select-action)
#+END_SRC
*** Recentf
#+BEGIN_SRC emacs-lisp
;; enable recent files mode.
(recentf-mode t)
(setq recentf-max-saved-items 50)
#+END_SRC
** Ace Jump Mode
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :ensure t)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
#+END_SRC
** Snippets
Use [[https://github.com/joaotavora/yasnippet][YASnippet]] for snippet functionality. Use the snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][YaSnippets-Snippets]] and some custom ones, currently just for ruby testing.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
(use-package yasnippet-snippets
  :ensure t)
(yas-global-mode 1))
;;(yas-load-directory "~/dotfiles/snippets/")
#+END_SRC
** Customise Emacs Settings
*** Hide customised settings
 This will stop Emacs adding customised settings to ~init.el~.
 #+BEGIN_SRC emacs-lisp
 (setq custom-file (make-temp-file "emacs-custom"))
 #+END_SRC
*** Hide Backup files
 #+BEGIN_SRC emacs-lisp
 (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
   backup-by-copying t    ; Don't delink hardlinks
   version-control t      ; Use version numbers on backups
   delete-old-versions t  ; Automatically delete excess backups
   kept-new-versions 20   ; how many of the newest versions to keep
   kept-old-versions 5    ; and how many of the old
   )
 #+END_SRC
*** Hide start screen
 #+BEGIN_SRC emacs-lisp
 (setq inhibit-startup-screen t)
 #+END_SRC
** Text Editing Features
*** Kill Whole Line
#+BEGIN_SRC emacs-lisp
(custom-set-variables
  '(kill-whole-line t))
#+END_SRC
*** Zap Up to Char
Bind ~M-z~ to ~zap-up-to-char~ instead of ~zap-to-char~.
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-z" 'zap-up-to-char)
#+END_SRC
*** Paste over
This is handy.
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
*** Expand Region
So this is really great
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t)
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
*N.B.* Need to see why contract fast key is not working as expected.
*** Drag Stuff
Drag Stuff makes it easy to move text around. It gives us a handy way to disable it for org-mode and preserve existing functionality.
#+BEGIN_SRC emacs-lisp
;; (use-package drag-stuff
  ;;   :ensure t)
  ;; (drag-stuff-global-mode 1)
  ;; (add-to-list 'drag-stuff-except-modes 'org-mode)
  ;; (drag-stuff-define-keys)
#+END_SRC
** Dired
Use dired-x for the handy jump-to functionality.
#+BEGIN_SRC emacs-lisp
    (keymap-set dired-mode-map "C-o" #'casual-dired-tmenu)
  (keymap-set isearch-mode-map "C-o" #'casual-isearch-tmenu)
(setq list-matching-lines-default-context-lines 1)
#+END_SRC
** Executable Shortcuts
#+BEGIN_SRC emacs-lisp
(defun execute-current-file ()
  (interactive)
  (executable-interpret (buffer-file-name)
))
(global-set-key (kbd "C-x C-i") 'execute-current-file)
#+END_SRC
** Configuring Programming Modes
*** Generic
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t)
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode))
(setq flycheck-highlighting-mode 'lines)
#+END_SRC
Use Outline Magic and configure ruby-specific regexp.
#+BEGIN_SRC emacs-lisp
  (use-package outline-magic
    :ensure t)

  (defun ruby-outline-level ()
    (or (and (match-string 1)
             (or (cdr (assoc (match-string 1) outline-heading-alist))
                 (- (match-end 1) (match-beginning 1))))
        (cdr (assoc (match-string 0) outline-heading-alist))
        (- (match-end 0) (match-beginning 0))))

  (let ((map outline-minor-mode-map))
    (define-key map (kbd "M-o M-o") 'outline-cycle))

  (defun overwrite-outline-vars()
    "Overwrite outline mode variables to recognise ruby syntax" 
    (set (make-local-variable 'outline-level) 'ruby-outline-level)
    (set (make-local-variable 'outline-regexp)
       (rx (group (* " "))
           bow
           (or "begin" "case" "class" "def" "else" "elsif" "end"
               "ensure" "if" "module" "rescue" "when" "unless")
           eow)))

  (add-hook 'prog-mode-hook 'outline-minor-mode)
  (add-hook 'prog-mode-hook 'hs-minor-mode)
#+END_SRC
**** Add custom key for comment region
#+BEGIN_SRC emacs-lisp
(global-set-key  (kbd "C-x r c") 'comment-or-uncomment-region)
#+END_SRC
**** Parentheses
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC
**** Spaces not tabs
I'm not a monster
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
#+END_SRC
*** Ruby
 #+BEGIN_SRC emacs-lisp
(use-package rubocop
  :ensure t)
(add-hook 'enh-ruby-mode-hook 'rubocop-mode)
(use-package enh-ruby-mode
  :ensure t)
(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
(use-package inf-ruby
  :ensure t
  :config
  (global-set-key (kbd "C-c r r") 'inf-ruby))
(use-package rvm
  :ensure t
  :config
  (global-set-key (kbd "C-c r a") 'rvm-activate-corresponding-ruby))

(use-package yard-mode
  :ensure t)
(add-hook 'enh-ruby-mode-hook 'yard-mode)

;; Overwrite the outline variables to recognise Ruby syntax.
(add-hook 'enh-ruby-mode-hook 'overwrite-outline-vars)
 #+END_SRC
*** Projectile Rails
#+BEGIN_SRC emacs-lisp
(use-package projectile-rails
  :ensure t
  :config
    (projectile-rails-global-mode)
    (define-key projectile-rails-mode-map
      (kbd "C-x r") 'projectile-rails-command-map))
#+END_SRC
**** Configure Ruby Macros
#+BEGIN_SRC emacs-lisp
(fset 'byebug "require 'byebug'; byebug")
(fset 'logger "Rails.logger.info(\"\")")
#+END_SRC
*** Javascript
**** JS2 Mode
Use JS2 Mode instead of JSX
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t)
#+END_SRC
**** TODO Need to configure to use automatically
**** React Snippets
#+BEGIN_SRC emacs-lisp
(autoload 'rjsx-mode "rjsx mode for React")
#+END_SRC
**** Javascript indentation
#+BEGIN_SRC emacs-lisp
(setq-default js-indent-level 2)
(setq-default jsx-indent-level 2)
#+END_SRC
*** Jsonnet
#+BEGIN_SRC emacs-lisp
(use-package jsonnet-mode
  :ensure t)
#+END_SRC
*** Docker
#+BEGIN_SRC emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t)
#+END_SRC
*** Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC
*** Groovy
#+BEGIN_SRC emacs-lisp
(use-package groovy-mode
  :ensure t)
#+END_SRC
*** Prolog
Use ~prolog-mode~ for ~.pl~ files.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
#+END_SRC
*** SQL
SQL mode is a little underpowered, but will stick with it until I find something better.
#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook 
  (lambda ()
    (setq truncate-lines t)))
#+END_SRC
**** Some alternatives to SQL Mode
- [[https://github.com/kiwanami/emacs-edbi][Emacs EDBI]] (not maintained, looks deprecated)
- [[https://github.com/kostafey/ejc-sql][ejc-sql]] (looks like it is more active)
*** Scala
#+BEGIN_SRC emacs-lisp
(use-package scala-mode
  :interpreter
    ("scala" . scala-mode))
#+END_SRC
*** ML
 #+BEGIN_SRC emacs-lisp
 (use-package sml-mode
   :ensure t)
 #+END_SRC
** Magit
Magit is so good. It really is great. Forge for GitHub interaction.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
(global-set-key (kbd "C-x g") 'magit-status)
(use-package forge
  :ensure t
  :after magit)
#+END_SRC
** Projectile
Set up projectile with the ~C-c p~ prefix. Helm will be the completion system. The search path differs between home and work.
#+BEGIN_SRC emacs-lisp
  (use-package rg
    :ensure t)
    (use-package projectile
      :ensure t
      :config
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (setq projectile-switch-project-action 'projectile-vc)
      (projectile-mode +1)
      (setq projectile-completion-system 'helm))

    (defun after-switch-actions ()
        "Activate correct ruby version"
        (rvm-activate-corresponding-ruby))

    (add-hook 'projectile-after-switch-project-hook 'after-switch-actions)

    (use-package helm-projectile
      :ensure t
      :config
      (helm-projectile-on))
    ;; Switch action should call projectile-vc && then rvm-activate-corresponding-ruby
    (when (at-home)
      (setq projectile-project-search-path '("~/projects/")))
    (when (at-work)
      (setq projectile-project-search-path '("~/Code/zendesk/")))
#+END_SRC
** GPTEL
#+BEGIN_SRC emacs-lisp
  (use-package gptel
    :ensure t)
#+END_SRC
** Org-Mode
*** Basic setup
*** Display
***** Margins 
 #+BEGIN_SRC emacs-lisp
   (defun org-mode--custom-display()
     (interactive)
     (setq header-line-format " ")  ;; Top padding
     (setq left-margin-width 2
           right-margin-width 2
           line-spacing 0.1)
     (set-window-buffer nil (current-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
        (setq org-bullets-bullet-list '(" ")
              org-pretty-entities t
              org-hide-emphasis-markers t
              org-fontify-quote-and-verse-blocks t
              org-fontify-whole-heading-line t)
        ;;(add-hook 'org-mode-hook 'org-bullets-mode)
 #+END_SRC
*** Log done time
#+BEGIN_SRC emacs-lisp
(setq-default org-log-done (quote time))
#+END_SRC
*** Define Agenda key
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
(add-hook 'org-agenda-finalize-hook
      (lambda () (remove-text-properties
         (point-min) (point-max) '(mouse-face t)))) 
#+END_SRC
*** Define store-link shortcut
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC
*** Activate Org Bullets
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-bullets-mode)
#+END_SRC
*** Ensure truncate lines is nil
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda ()
  (setq truncate-lines nil)))
#+END_SRC
*** Set up org-capture
#+BEGIN_SRC emacs-lisp
;;(setq org-default-notes-file (concat org-directory "/notes.org"))
;;(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC
**** Use outline path for refiling
#+BEGIN_SRC emacs-lisp
;;(setq org-refile-use-outline-path t)
#+END_SRC
**** Add a template for work items
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'org-capture-templates
  ;;       '(("w" "Work Item" entry (file+headline (concat org-directory "/projects/career/work_items.org") "Work Items")
  ;;          "* Work Item %?\n  %i\n  %a")))
#+END_SRC
*** Properties template
Use this for defining properties on documents.
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'org-structure-template-alist
  ;;     (list "p" (concat ":PROPERTIES:\n"
  ;;                       "?\n"
  ;;                       ":END:")))
#+END_SRC
*** Org-Export backends
#+BEGIN_SRC emacs-lisp
  ;; (use-package ox-jira
  ;;   :ensure t)
  ;; (use-package ox-slack
  ;;   :ensure t)
#+END_SRC
*** References template
A template to support consistent properties in reference documents.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
    (list "R" (concat ":Title: ?\n"
                      ":Author: \n"
                      ":Source: \n"
                      ":Date: \n"
                      ":Genre: ")))
#+END_SRC
*** Emacs Lisp template
To speed up writing ~#SRC emacs-lisp~ blocks in conf.org.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
    (list "sel" (concat "#+BEGIN_SRC emacs-lisp\n"
                        "?\n"
                        "#+END_SRC")))
#+END_SRC
*** TOC Snippet
I usually want this to be disabled, so a snippet can speed this up.
#+BEGIN_SRC emacs-lisp
;(add-to-list 'org-structure-template-alist
;    (list "toc" "#+OPTIONS: toc:?"))
#+END_SRC
*** Ruby Snippet
Since I am writing a lot of Ruby snippets in investigation files, a Ruby snippet shortcut will save a little time.
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'org-structure-template-alist
  ;;     (list "sr" (concat "#+BEGIN_SRC ruby\n"
  ;;                         "?\n"
  ;;                         "#+END_SRC")))
#+END_SRC
*** Org-Export backends
#+BEGIN_SRC emacs-lisp
(setq Org-Reveal-title-slide nil)
#+END_SRC
*** Babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
    '((shell . t)))
#+END_SRC
*** Startup behaviour
**** Open conf.org
#+BEGIN_SRC emacs-lisp
(find-file "~/Code/dotfiles/conf.org")
(find-file "~/org/daily.org")
#+END_SRC
** Thing at Point
#+BEGIN_SRC emacs-lisp
(use-package thingatpt
  :ensure t)
#+END_SRC

** Theme
Doom-theme is pretty cool.
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-wilmersdorf t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))

  (defun toggle-theme ()
    (interactive)
    (disable-theme 'doom-wilmersdorf)
    (load-theme 'solarized-light t))
#+END_SRC
** Provide Init
#+BEGIN_SRC emacs-lisp
(provide 'init)
;;; init.el ends here
#+END_SRC
