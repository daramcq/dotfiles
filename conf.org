* Emacs Configuration file
** Package cruft
#+BEGIN_SRC emacs-lisp
;;; package --- Summary
;;; Commentary: This is my Emacs configuration, it's a literate programming job
;;; My Emacs init file
#+END_SRC
** Debug behaviour
#+BEGIN_SRC emacs-lisp
(setq debug-on-error t)
#+END_SRC
** Packaging setup
*** Core packages
 #+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
  '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
 #+END_SRC
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))
#+END_SRC
** Set work and home checks
#+BEGIN_SRC emacs-lisp
(defun at-work()
  (string-equal system-type "darwin"))

(defun at-home()
  (string-equal system-type "gnu/linux"))
#+END_SRC
** Font Display
#+BEGIN_SRC emacs-lisp
(when (at-work)
  (set-face-attribute 'default nil :height 160)
  (set-frame-font "Fira Code 20" nil t))
#+END_SRC
** Enable narrow region
#+BEGIN_SRC emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t)
(powerline-default-theme)
#+END_SRC
** Ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC
** Ag
The Silver searcher!
#+BEGIN_SRC emacs-lisp
(use-package ag
  :ensure t)
#+END_SRC
** Snippets
Use [[https://github.com/joaotavora/yasnippet][YASnippet]] for snippet functionality. Actual snippets provided by [[https://github.com/AndreaCrotti/yasnippet-snippets][YaSnippets-Snippets]].
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
(use-package yasnippet-snippets
  :ensure t)
(yas-global-mode 1))
#+END_SRC
*** React-Snippets
#+BEGIN_SRC emacs-lisp
(use-package react-snippets
  :ensure t)
#+END_SRC
** Set custom settings
This will stop Emacs adding customised settings to ~init.el~.
#+BEGIN_SRC emacs-lisp
(setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC
** Hide start screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC
** Hide Backup files
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )
#+END_SRC
** Coding Style
** Configuring Programming Modes
*** Generic
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t)
(use-package flycheck
  :ensure t)
#+END_SRC
**** Parentheses
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC
**** Spaces not tabs
I'm not a monster
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
#+END_SRC

*** Ruby
 #+BEGIN_SRC emacs-lisp
(use-package rubocop
  :ensure t)
(add-hook 'ruby-mode-hook 'rubocop-mode)
(use-package enh-ruby-mode
  :ensure t)
(use-package inf-ruby
  :ensure t)
(use-package yard-mode
  :ensure t)
(add-hook 'ruby-mode-hook 'yard-mode)
(add-hook 'ruby-mode-hook 'eldoc-mode)
 #+END_SRC
**** Configure Ruby Macros
#+BEGIN_SRC emacs-lisp
(fset 'byebug "require 'byebug'; byebug")
(fset 'logger "Rails.logger.info(\"\")")
#+END_SRC
*** Javascript
**** JS2 Mode
Use JS2 Mode instead of JSX
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t)
#+END_SRC
**** React Snippets
#+BEGIN_SRC emacs-lisp
(autoload 'rjsx-mode "rjsx mode for React")
#+END_SRC
**** Javascript indentation
#+BEGIN_SRC emacs-lisp
(setq-default js-indent-level 2)
(setq-default jsx-indent-level 2)
#+END_SRC
**** ElmJS
 #+BEGIN_SRC emacs-lisp
(use-package elm-mode
  :ensure nil)
 #+END_SRC
*** Clojure
#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure nil)
(use-package clojure-mode
  :ensure nil)
#+END_SRC
*** Docker
#+BEGIN_SRC emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t)
#+END_SRC
*** Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC
** Magit
Magit is so good. It really is great.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
** Org-Mode
The greatest thing about Emacs. Well, maybe that's Magit. Second greatest?
*** Basic setup
 #+BEGIN_SRC emacs-lisp
(use-package org-alert
  :ensure t)
(use-package org-bullets
  :ensure t)
 #+END_SRC
*** Set the org-directory and the org-agenda-files
 I do work in the projects dir, and this can be deeply nested.
 #+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org")
(setq org-projects-dir (concat org-directory "/projects/"))
(setq code-projects-dir "~/projects")
(setq org-agenda-files (list org-directory
                             org-projects-dir
                             code-projects-dir
                             (concat org-projects-dir "home")
                             (concat org-projects-dir "meta")
                             (concat org-projects-dir "career")))
 #+END_SRC
**** Define Org Refile targets
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
#+END_SRC
**** Recursive function to find nested files
 This is taken from [[https://github.com/suvayu/.emacs.d/blob/master/lisp/nifty.el][here]].
  #+BEGIN_SRC emacs-lisp
 ;; recursively find .org files in provided directory
 ;; modified from an Emacs Lisp Intro example
 (defun sa-find-org-file-recursively (&optional directory filext)
   "Return .org and .org_archive files recursively from DIRECTORY.
 If FILEXT is provided, return files with extension FILEXT instead."
   (interactive "DDirectory: ")
   (let* (org-file-list
	  (case-fold-search t)	      ; filesystems are case sensitive
	  (file-name-regex "^[^.#].*") ; exclude dot, autosave, and backup files
	  (filext (or filext "org$\\\|org_archive"))
	  (fileregex (format "%s\\.\\(%s$\\)" file-name-regex filext))
	  (cur-dir-list (directory-files directory t file-name-regex)))
     ;; loop over directory listing
     (dolist (file-or-dir cur-dir-list org-file-list) ; returns org-file-list
       (cond
        ((file-regular-p file-or-dir) ; regular files
	 (if (string-match fileregex file-or-dir) ; org files
	     (add-to-list 'org-file-list file-or-dir)))
        ((file-directory-p file-or-dir)
	 (dolist (org-file (sa-find-org-file-recursively file-or-dir filext)
			   org-file-list) ; add files found to result
	   (add-to-list 'org-file-list org-file)))))))
  #+END_SRC
*** Log done time
#+BEGIN_SRC emacs-lisp
(setq-default org-log-done (quote time))
#+END_SRC
*** Define Agenda key
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC
*** Define store-link shortcut
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC
*** Activate Org Bullets
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-bullets-mode)
#+END_SRC
*** Ensure truncate lines is nil
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda ()
  (setq truncate-lines nil)))
#+END_SRC
*** Set up org-capture
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC
**** Use outline path for refiling
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path t)
#+END_SRC
*** Properties template
Use this for defining properties on documents.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
    (list "p" (concat ":PROPERTIES:\n"
                      "?\n"
                      ":END:")))
#+END_SRC
*** References template
A template to support consistent properties in reference documents.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
    (list "R" (concat ":Title: ?\n"
                      ":Author: \n"
                      ":Source: \n"
                      ":Date: \n"
                      ":Genre: ")))
#+END_SRC
*** Emacs Lisp template
To speed up writing ~#SRC emacs-lisp~ blocks in conf.org.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
    (list "sel" (concat "#+BEGIN_SRC emacs-lisp\n"
                        "?\n"
                        "#+END_SRC")))
#+END_SRC
*** Startup behaviour
**** Open conf.org
#+BEGIN_SRC emacs-lisp
(find-file "~/dotfiles/conf.org")
#+END_SRC
**** Open todo
#+BEGIN_SRC emacs-lisp
(find-file (concat org-directory "/todo.org"))
#+END_SRC
**** Open capture notes
#+BEGIN_SRC emacs-lisp
(find-file org-default-notes-file)
#+END_SRC
** Thing at Point
#+BEGIN_SRC emacs-lisp
(use-package thingatpt
  :ensure t)
#+END_SRC
** WIP Additional comment functionality
#+BEGIN_SRC emacs-lisp
(string-match "^\s*#"  (thing-at-point 'line))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(use-package afternoon-theme
  :ensure t)
(load-theme 'afternoon t)
#+END_SRC
** Provide Init
#+BEGIN_SRC emacs-lisp
(provide 'init)
;;; init.el ends here
#+END_SRC
