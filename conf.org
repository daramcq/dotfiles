* Emacs Configuration file
** Package cruft
#+BEGIN_SRC emacs-lisp
;;; package --- Summary
;;; Commentary: This is my Emacs configuration, it's a literate programming job
;;; My Emacs init file
#+END_SRC
** Debug behaviour
#+BEGIN_SRC emacs-lisp
(setq debug-on-error t)
#+END_SRC
** Set work and home checks
#+BEGIN_SRC emacs-lisp
(defun at-work()
  (string-equal system-type "darwin"))

(defun at-home()
  (string-equal system-type "gnu/linux"))
#+END_SRC
** Packaging setup
*** Core packages
 #+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
  '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
 #+END_SRC
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))
#+END_SRC
** Multi-Term
Adding multi-term to support ZSH integration:
#+BEGIN_SRC emacs-lisp
(use-package multi-term
  :ensure t)
(when (at-work)
  (setq multi-term-program "/bin/zsh"))
#+END_SRC
** Font Display
*** Basic work/home distinction
#+BEGIN_SRC emacs-lisp
(when (at-work)
  (set-face-attribute 'default nil :height 160)
  (set-frame-font "Inconsolata 18" nil t))
(when (at-home)
  (set-face-attribute 'default nil :height 160)
  (set-frame-font "Ubuntu Mono 16" nil t))
#+END_SRC
*** Org-mode customisation
Use variable-pitch for prose and fixed-pitch for code.
#+BEGIN_SRC emacs-lisp
(use-package org-variable-pitch
  :ensure t)
(set-face-attribute 'default nil :font "Inconsolata 18")
(set-face-attribute 'fixed-pitch nil :font "Inconsolata 18")
(set-face-attribute 'variable-pitch nil :font "Geneva 16")
(add-hook 'org-mode-hook 'org-variable-pitch-minor-mode)
#+END_SRC
** Enable narrow region
#+BEGIN_SRC emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t)
(powerline-default-theme)
#+END_SRC
** Finding Files
*** Copy Buffer name to Kill Ring
#+BEGIN_SRC emacs-lisp
(defun copy-buffer-name ()
  (interactive)
  (kill-new (buffer-file-name)))

(defun project-relative-filename ()
  (interactive)
  (nth 1 (split-string (buffer-file-name) (projectile-project-root))))

(defun copy-project-relative-filename ()
  (interactive)
  (kill-new (project-relative-filename))
  (message (format "Copied %s" (project-relative-filename))))
(global-set-key (kbd "C-c f") 'copy-project-relative-filename)
#+END_SRC
*** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t)
(require 'helm-config)
(setq helm-split-window-in-side-p t
      helm-move-to-line-cycle-in-source t)

(helm-mode 1)
(global-set-key (kbd "C-x b") 'helm-buffers-list)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-r") 'helm-recentf)
(global-set-key (kbd "C-s") 'helm-occur)
(global-set-key (kbd "C-x r l") 'helm-bookmarks)
(setq helm-move-to-line-cycle-in-source t)
(define-key helm-map (kbd "C-z")  'helm-select-action)
#+END_SRC
*** Recentf
#+BEGIN_SRC emacs-lisp
;; enable recent files mode.
(recentf-mode t)
(setq recentf-max-saved-items 50)
#+END_SRC
** Ace Jump Mode
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :ensure t)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
#+END_SRC
** Ag
The Silver searcher!
#+BEGIN_SRC emacs-lisp
(use-package ag
  :ensure t)
#+END_SRC
** Snippets
Use [[https://github.com/joaotavora/yasnippet][YASnippet]] for snippet functionality. Use the snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][YaSnippets-Snippets]] and some custom ones, currently just for ruby testing.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
(use-package yasnippet-snippets
  :ensure t)
(yas-global-mode 1))
(yas-load-directory "~/dotfiles/snippets/")
#+END_SRC
*** React-Snippets
#+BEGIN_SRC emacs-lisp
(use-package react-snippets
  :ensure t)
#+END_SRC
** Customise Emacs Settings
*** Hide customised settings
 This will stop Emacs adding customised settings to ~init.el~.
 #+BEGIN_SRC emacs-lisp
 (setq custom-file (make-temp-file "emacs-custom"))
 #+END_SRC
*** Hide Backup files
 #+BEGIN_SRC emacs-lisp
 (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
   backup-by-copying t    ; Don't delink hardlinks
   version-control t      ; Use version numbers on backups
   delete-old-versions t  ; Automatically delete excess backups
   kept-new-versions 20   ; how many of the newest versions to keep
   kept-old-versions 5    ; and how many of the old
   )
 #+END_SRC
*** Hide start screen
 #+BEGIN_SRC emacs-lisp
 (setq inhibit-startup-screen t)
 #+END_SRC
** Text Editing Features
*** Kill Whole Line
#+BEGIN_SRC emacs-lisp
(custom-set-variables
  '(kill-whole-line t))
#+END_SRC
*** Zap Up to Char
Bind ~M-z~ to ~zap-up-to-char~ instead of ~zap-to-char~.
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-z" 'zap-up-to-char)
#+END_SRC
*** Paste over
This is handy.
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
*** Expand Region
So this is really great
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t)
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
*N.B.* Need to see why contract fast key is not working as expected.
*** Drag Stuff
Drag Stuff makes it easy to move text around. It gives us a handy way to disable it for org-mode and preserve existing functionality.
#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :ensure t)
(drag-stuff-global-mode 1)
(add-to-list 'drag-stuff-except-modes 'org-mode)
(drag-stuff-define-keys)
#+END_SRC
** Dired
Use dired-x for the handy jump-to functionality.
#+BEGIN_SRC emacs-lisp
(use-package dired-x)
#+END_SRC
** Executable Shortcuts
#+BEGIN_SRC emacs-lisp
(defun execute-current-file ()
  (interactive)
  (executable-interpret (buffer-file-name)
))
(global-set-key (kbd "C-x C-i") 'execute-current-file)
#+END_SRC
** Configuring Programming Modes
*** Generic
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t)
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode))
(setq flycheck-highlighting-mode 'lines)
#+END_SRC
Use Outline Magic and configure ruby-specific regexp.
#+BEGIN_SRC emacs-lisp
(use-package outline-magic
  :ensure t)

(defun ruby-outline-level ()
  (or (and (match-string 1)
           (or (cdr (assoc (match-string 1) outline-heading-alist))
               (- (match-end 1) (match-beginning 1))))
      (cdr (assoc (match-string 0) outline-heading-alist))
      (- (match-end 0) (match-beginning 0))))

(let ((map outline-minor-mode-map))
  (define-key map (kbd "M-o M-o") 'outline-cycle))

(defun overwrite-outline-vars()
  "Overwrite outline mode variables to recognise ruby syntax" 
  (set (make-local-variable 'outline-level) 'ruby-outline-level)
  (set (make-local-variable 'outline-regexp)
     (rx (group (* " "))
         bow
         (or "begin" "case" "class" "def" "else" "elsif" "end"
             "ensure" "if" "module" "rescue" "when" "unless")
         eow)))

(add-hook 'prog-mode-hook 'outline-minor-mode)
(add-hook 'prog-mode-hook 'hs-minor-mode)
#+END_SRC
**** Add custom key for comment region
#+BEGIN_SRC emacs-lisp
(global-set-key  (kbd "C-x r c") 'comment-or-uncomment-region)
#+END_SRC
**** Parentheses
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC
**** Spaces not tabs
I'm not a monster
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
#+END_SRC
*** Ruby
 #+BEGIN_SRC emacs-lisp
(use-package rubocop
  :ensure t)
(add-hook 'enh-ruby-mode-hook 'rubocop-mode)
(use-package enh-ruby-mode
  :ensure t)
(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
(use-package inf-ruby
  :ensure t
  :config
  (global-set-key (kbd "C-c r r") 'inf-ruby))
(use-package rvm
  :ensure t
  :config
  (global-set-key (kbd "C-c r a") 'rvm-activate-corresponding-ruby))

(use-package yard-mode
  :ensure t)
(add-hook 'enh-ruby-mode-hook 'yard-mode)

;; Overwrite the outline variables to recognise Ruby syntax.
(add-hook 'enh-ruby-mode-hook 'overwrite-outline-vars)
 #+END_SRC
*** Projectile Rails
#+BEGIN_SRC emacs-lisp
(use-package projectile-rails
  :ensure t
  :config
    (projectile-rails-global-mode)
    (define-key projectile-rails-mode-map
      (kbd "C-x r") 'projectile-rails-command-map))
#+END_SRC
**** Configure Ruby Macros
#+BEGIN_SRC emacs-lisp
(fset 'byebug "require 'byebug'; byebug")
(fset 'logger "Rails.logger.info(\"\")")
#+END_SRC
*** Javascript
**** JS2 Mode
Use JS2 Mode instead of JSX
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t)
#+END_SRC
**** TODO Need to configure to use automatically
**** React Snippets
#+BEGIN_SRC emacs-lisp
(autoload 'rjsx-mode "rjsx mode for React")
#+END_SRC
**** Javascript indentation
#+BEGIN_SRC emacs-lisp
(setq-default js-indent-level 2)
(setq-default jsx-indent-level 2)
#+END_SRC
**** ElmJS
 #+BEGIN_SRC emacs-lisp
(use-package elm-mode
  :ensure nil)
 #+END_SRC
**** NodeJS Repl
#+BEGIN_SRC emacs-lisp
(use-package nodejs-repl
  :ensure t)
(add-hook 'js-mode-hook
    (lambda ()
      (define-key js-mode-map (kbd "C-x C-e") 'nodejs-repl-send-last-expression)
      (define-key js-mode-map (kbd "C-c C-j") 'nodejs-repl-send-line)
      (define-key js-mode-map (kbd "C-c C-r") 'nodejs-repl-send-region)
      (define-key js-mode-map (kbd "C-c C-l") 'nodejs-repl-load-file)
      (define-key js-mode-map (kbd "C-c C-z") 'nodejs-repl-switch-to-repl)))
#+END_SRC
*** Clojure
#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure nil)
(use-package clojure-mode
  :ensure nil)
#+END_SRC
*** Docker
#+BEGIN_SRC emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t)
#+END_SRC
*** Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC
*** Groovy
#+BEGIN_SRC emacs-lisp
(use-package groovy-mode
  :ensure t)
#+END_SRC
*** Prolog
Use ~prolog-mode~ for ~.pl~ files.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
#+END_SRC
*** SQL
SQL mode is a little underpowered, but will stick with it until I find something better.
#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook 
  (lambda ()
    (setq truncate-lines t)))
#+END_SRC
**** Some alternatives to SQL Mode
- [[https://github.com/kiwanami/emacs-edbi][Emacs EDBI]] (not maintained, looks deprecated)
- [[https://github.com/kostafey/ejc-sql][ejc-sql]] (looks like it is more active)
*** Scala
#+BEGIN_SRC emacs-lisp
(use-package scala-mode
  :interpreter
    ("scala" . scala-mode))
#+END_SRC
*** ML
 #+BEGIN_SRC emacs-lisp
 (use-package sml-mode
   :ensure t)
 #+END_SRC
** Magit
Magit is so good. It really is great. Forge for GitHub interaction.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
(global-set-key (kbd "C-x g") 'magit-status)
(use-package forge
  :ensure t
  :after magit)
#+END_SRC
** Projectile
Set up projectile with the ~C-c p~ prefix. Helm will be the completion system. The search path differs between home and work.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-switch-project-action 'projectile-vc)
  (projectile-mode +1)
  (setq projectile-completion-system 'helm))

(defun after-switch-actions ()
    "Activate correct ruby version"
    (rvm-activate-corresponding-ruby))

(add-hook 'projectile-after-switch-project-hook 'after-switch-actions)

(use-package helm-projectile
  :ensure t
  :config
  (helm-projectile-on))
;; Switch action should call projectile-vc && then rvm-activate-corresponding-ruby
(when (at-home)
  (setq projectile-project-search-path '("~/projects/")))
(when (at-work)
  (setq projectile-project-search-path '("~/Code/zendesk/")))
#+END_SRC
** Org-Mode
*** Basic setup
 #+BEGIN_SRC emacs-lisp
(use-package org-alert
  :ensure t)
(use-package org-bullets
  :ensure t)
 #+END_SRC
*** Set the org-directory and the org-agenda-files
 I do work in the projects dir, and this can be deeply nested.
 #+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org")
(setq org-projects-dir (concat org-directory "/projects/"))
(setq code-projects-dir "~/projects")
(setq org-agenda-files (list org-directory
                             org-projects-dir
                             code-projects-dir
                             (concat org-projects-dir "home")
                             (concat org-projects-dir "meta")
                             (concat org-projects-dir "misc")
                             (concat org-projects-dir "career")))
 #+END_SRC
**** Define Org Refile targets
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
#+END_SRC
**** Recursive function to find nested files
 This is taken from [[https://github.com/suvayu/.emacs.d/blob/master/lisp/nifty.el][here]].
  #+BEGIN_SRC emacs-lisp
 ;; recursively find .org files in provided directory
 ;; modified from an Emacs Lisp Intro example
 (defun sa-find-org-file-recursively (&optional directory filext)
   "Return .org and .org_archive files recursively from DIRECTORY.
 If FILEXT is provided, return files with extension FILEXT instead."
   (interactive "DDirectory: ")
   (let* (org-file-list
	  (case-fold-search t)	      ; filesystems are case sensitive
	  (file-name-regex "^[^.#].*") ; exclude dot, autosave, and backup files
	  (filext (or filext "org$\\\|org_archive"))
	  (fileregex (format "%s\\.\\(%s$\\)" file-name-regex filext))
	  (cur-dir-list (directory-files directory t file-name-regex)))
     ;; loop over directory listing
     (dolist (file-or-dir cur-dir-list org-file-list) ; returns org-file-list
       (cond
        ((file-regular-p file-or-dir) ; regular files
	 (if (string-match fileregex file-or-dir) ; org files
	     (add-to-list 'org-file-list file-or-dir)))
        ((file-directory-p file-or-dir)
	 (dolist (org-file (sa-find-org-file-recursively file-or-dir filext)
			   org-file-list) ; add files found to result
	   (add-to-list 'org-file-list org-file)))))))
  #+END_SRC
*** Log done time
#+BEGIN_SRC emacs-lisp
(setq-default org-log-done (quote time))
#+END_SRC
*** Define Agenda key
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC
*** Define store-link shortcut
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC
*** Activate Org Bullets
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-bullets-mode)
#+END_SRC
*** Ensure truncate lines is nil
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda ()
  (setq truncate-lines nil)))
#+END_SRC
*** Set up org-capture
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC
**** Use outline path for refiling
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path t)
#+END_SRC
**** Add a template for work items
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'org-capture-templates
  ;;       '(("w" "Work Item" entry (file+headline (concat org-directory "/projects/career/work_items.org") "Work Items")
  ;;          "* Work Item %?\n  %i\n  %a")))
#+END_SRC
*** Properties template
Use this for defining properties on documents.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
    (list "p" (concat ":PROPERTIES:\n"
                      "?\n"
                      ":END:")))
#+END_SRC
*** Org-Export backends
#+BEGIN_SRC emacs-lisp
(use-package ox-jira
  :ensure t)
(use-package ox-slack
  :ensure t)
(use-package ox-pandoc
  :ensure t)
#+END_SRC
*** References template
A template to support consistent properties in reference documents.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
    (list "R" (concat ":Title: ?\n"
                      ":Author: \n"
                      ":Source: \n"
                      ":Date: \n"
                      ":Genre: ")))
#+END_SRC
*** Emacs Lisp template
To speed up writing ~#SRC emacs-lisp~ blocks in conf.org.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
    (list "sel" (concat "#+BEGIN_SRC emacs-lisp\n"
                        "?\n"
                        "#+END_SRC")))
#+END_SRC
*** TOC Snippet
I usually want this to be disabled, so a snippet can speed this up.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
    (list "toc" "#+OPTIONS: toc:?"))
#+END_SRC
*** Ruby Snippet
Since I am writing a lot of Ruby snippets in investigation files, a Ruby snippet shortcut will save a little time.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
    (list "sr" (concat "#+BEGIN_SRC ruby\n"
                        "?\n"
                        "#+END_SRC")))
#+END_SRC
*** Org-Export backends
#+BEGIN_SRC emacs-lisp
(use-package ox-jira
  :ensure t)
(use-package ox-slack
  :ensure t)
(use-package ox-pandoc
  :ensure t)
(use-package ox-html)
(use-package ox-reveal
  :ensure t)
(setq Org-Reveal-title-slide nil)
#+END_SRC
*** Babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
    '((shell . t)))
#+END_SRC
*** Startup behaviour
**** Open conf.org
#+BEGIN_SRC emacs-lisp
(find-file "~/dotfiles/conf.org")
#+END_SRC
**** Open todo
#+BEGIN_SRC emacs-lisp
(find-file (concat org-directory "/todo.org"))
#+END_SRC
**** Open capture notes
#+BEGIN_SRC emacs-lisp
(find-file org-default-notes-file)
#+END_SRC
** Thing at Point
#+BEGIN_SRC emacs-lisp
(use-package thingatpt
  :ensure t)
#+END_SRC
** WIP Additional comment functionality
#+BEGIN_SRC emacs-lisp
(string-match "^\s*#"  (thing-at-point 'line))
(format "%s" comment-start)
#+END_SRC
Get current line
#+BEGIN_SRC emacs-lisp
#+END_SRC
** Local development
Run all the voice containers in development mode
#+BEGIN_SRC emacs-lisp
(defun create-terminal-buffer (bufname)
  ;;; Create a named terminal buffer
  (interactive)
  (term "/bin/zsh")
  (rename-buffer bufname))

(defun run-terminal-buffer-process (bufname command)
  ;;; Run a process in a terminal buffer
  (interactive)
  (term-send-string
         (get-buffer-process bufname)
         (format "%s\r" command)))

(defun create-named-term-processes (buffer-process-list)
  ;;; Create multiple named terminal processes
  (interactive)
  (loop for tuple in buffer-process-list
        do
        (let ((bufname (car tuple))
              (bufcommand (car (cdr tuple))))
        (create-terminal-buffer bufname)
        (run-terminal-buffer-process bufname bufcommand))))

(defun classic-run ()
  ;; Run Classic in development mode
  (interactive)
  (create-named-term-processes '(("classic-srv" "zdi classic restart -d"))))

(defun classic-shell ()
  ;; Run Classic shell
  (interactive)
  (create-named-term-processes '(("classic-shell" "zdi classic shell -d"))))

(defun classic-console ()
  ;; Run Classic console
  (interactive)
  (create-named-term-processes '(("classic-console" "zdi classic console -d"))))


(defun voice-run-all ()
  ;;; Run all the voice containers in development mode
  (interactive)
  (create-named-term-processes '(("voice_srv" "zdi voice restart -d")
                                 ("voice_resque" "zdi voice_resque restart -d")
                                 ("voice_resque_low" "zdi voice_resque_low restart -d")
                                 ("voice_consumers" "zdi voice_consumers restart -d"))))

(defun voice-run-light ()
  ;;; Run some of the voice containers in development mode
  (interactive)
  (create-named-term-processes '(("voice_srv" "zdi voice restart -d")
                                 ("voice_resque" "zdi voice_resque restart -d"))))

(defun voice-shell ()
  (interactive)
  (create-named-term-processes '(("voice-shell" "zdi voice shell -d"))))

(defun voice-console ()
  (interactive)
  (create-named-term-processes '(("voice-console" "zdi voice console -d"))))

(defun sms-run-light ()
  ;;; Run some of the voice containers in development mode
  (interactive)
  (create-named-term-processes '(("sms_srv" "zdi sms restart -d")
                                 ("sms_resque" "zdi sms_resque restart -d"))))

(defun sms-shell ()
  (interactive)
  (create-named-term-processes '(("sms-shell" "zdi sms shell -d"))))

(defun sms-console ()
  (interactive)
  (create-named-term-processes '(("sms-console" "zdi sms console -d"))))

(defun start-world ()
  (interactive)
  (create-named-term-processes '(("term" "zdi world restart"))))
#+END_SRC
*** Putzing about with keymaps
#+BEGIN_SRC emacs-lisp
(defun add-keys (keymap)
  (interactive)
  (define-key keymap "a" (lambda () (interactive) (message "And then A")))
  (define-key keymap "b" (lambda () (interactive) (message "And then B"))))

(let ((message-map (make-sparse-keymap "Message Map")))
  (let ((a-nested-message-map (make-sparse-keymap "You pressed A"))
        (b-nested-message-map (make-sparse-keymap "You pressed B")))
    (define-key message-map "a" a-nested-message-map)
    (define-key message-map "b" b-nested-message-map)
    (when (keymapp a-nested-message-map) (message "Yes it is a message map"))
    (map 'list 'add-keys (list a-nested-message-map b-nested-message-map)))
  (global-set-key (kbd "C-z") message-map))
#+END_SRC
** Theme
Doom-theme is pretty cool.
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-nord t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
  )
#+END_SRC
** Provide Init
#+BEGIN_SRC emacs-lisp
(provide 'init)
;;; init.el ends here
#+END_SRC
